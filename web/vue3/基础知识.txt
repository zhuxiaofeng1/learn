第一部分：基础

一、组件
每个vue应用都是通过createApp函数创建的，传递给createApp的选项用于配置根组件。当挂载应用时，该组件被用作渲染的起点。
一个应用需要被挂载到一个dom元素中。
eg:
const RootComponent = {...}
const app = Vue.createApp(RootComponent);
const vm = app.mount("#app");
注册一个全局组件：
const app = Vue.createApp({...})
app.component("custom-component", {
    ...
})
调用：<custom-component></custom-component>

二、计算属性
eg:
var vm = new Vue({
    el:"#app",
    data: {
        name: "A",
    },
    computed: {
        site: {
            get: function() {
                return this.name;
            },
            set: function(name) {
                this.name = name;
            }
        }
    }
})

三、修饰符
1、事件修饰符
<!-- 阻止单击事件继续传播 -->
<a @click.stop="doThis"></a>

<!-- 提交事件不再重载页面 -->
<form @submit.prevent="onSubmit"></form>

<!-- 修饰符可以串联 -->
<a @click.stop.prevent="doThat"></a>

<!-- 只有修饰符 -->
<form @submit.prevent></form>

<!-- 添加事件监听器时使用事件捕获模式 -->
<!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 -->
<div @click.capture="doThis">...</div>

<!-- 只当在 event.target 是当前元素自身时触发处理函数 -->
<!-- 即事件不是从内部元素触发的 -->
<div @click.self="doThat">...</div>

2、按键修饰符
<!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` -->
<input @keyup.enter="submit" />

3、鼠标按钮修饰符
.left .right .middle

四、类与样式绑定
1、类
<div :class="{'custom-class': isCuston}"></div>
<div :class="{active: isActive, 'text-danger': hasError}"></div>
<div :class="ClassObj"></div>
data() {
    return {
        ClassObj: {
            activa: true,
            'text-danger': true
        }
    }
}
<div :class="[activeClass, errorClass]"></div>
data() {
    return {
        activeClass: "active",
        errorClass: "text-danger"
    }
}
<div :class="[isActive ? activeClass : '', errorClass]"></div>
data() {
    return {
        activeClass: "active",
        errorClass: "text-danger"
    }
}
<div :class="[{active: isActive}, errorClass]"></div>
data() {
    return {
        isActive: true,
        errorClass: "text-danger"
    }
}
2、内联样式
<div :style="{color: color, fontSize: fontSize + 'px', 'font-weight': 400}"></div>
data() {
    return {
        color: "red",
        fontSize: 30
    }
}
类似于类绑定

五、常用指令
v-if, v-else, v-else-if
v-show
v-for :key

六、事件处理
v-on:click="clickMethod"或@click="clickMethod"
事件处理器的值：1、内联事件处理器：事件被触发时执行的内联js语句；2、方法事件处理器：一个指向组件上定义的方法的属性名或者路径
1、内联事件处理器
<button @click="count++">add 1</button>
<button @click="addOne()"></button>
data() {
    return {
        count: 0
    }
},
methods: {
    addOne() {}
}
2、方法处理器
<button @click="addOne"></button>
methods: {
    addOne() {}
}

七、表单输入绑定
v-model
<input v-model="value">
修饰符
.lazy
默认情况下，v-model会在input事件后更新数据；加lazy之后为每次change事件之后更新数据。
<input v-model.lazy="value">
.number
用户输入自动转化为数字。
.trim
默认去除输入内容两端的空格。

八、生命周期
Renderer => setup(Composition API) => beforeCreate => init Options API => created => beforeMount => initial render create & insert DOM nodes =>  Mounted (伴随 beforeUpdate => updates) => beforeUnmount => Unmounted

九、侦听器
默认情况下，用户创建的侦听器回调，都会在vue组件更新之前被调用。
watch: {
    variable(newValue, oldValue) {
        // ...
    },
    object: {
        handler(newValue, oldValue) {
            // ...
        },
        deep: true,
        immediate: true
    },
    "obj.name" () {
        // ...
    }
}
如果想在侦听器回调中能访问被Vue更新之后的DOM，你需要指明flush: 'post'

可以通过组件实例$watch()来命令式创建侦听器
export default {
    created() {
        this.$watch("variable", (newValue) => {
            /// ...
        })
    }
}
停止侦听器
const unwatch = this.$watch("foo", callback);

// ...当该侦听器不再需要时
unwatch();

十、模板引用
ref
this.$refs.

十一、组件基础
结构：
            Root
_____________|____________
|            |           |
Header      Main        Aside
             |           |
             |           |
            Article     Item

.vue 单文件组件（简称SFC）
子父组件通信：
父组件：传递props
子组件：$emit()
动态组件：<component :is="currentTab"></component>
可以通过<KeepAlive></KeepAlive>组件强制被切换掉的组件仍然保存存活状态。


第二部分：深入组件
一、注册
